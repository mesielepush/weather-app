!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(2);var r=()=>{const e=new Date;return["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()].toUpperCase()+" / "+e.getDate()+" / "+e.getFullYear()};var i=e=>{e.then(e=>{console.log(e);const t=document.getElementById("country"),n=document.getElementById("temp"),i=document.getElementById("temp_max"),o=document.getElementById("temp_min"),a=document.getElementById("temp_feels"),c=document.getElementById("weather"),s=document.getElementById("pressure"),u=document.getElementById("wind"),l=document.getElementById("clouds"),d=document.getElementById("humidity"),p=document.getElementById("cities");document.getElementById("now").innerText=r(),t.innerText=e.country,n.innerText=e.temp,i.innerText=e.tempMax,o.innerText=e.tempMin,a.innerText=e.feels,c.innerText=e.weather.weather,s.innerText=e.weather.pressure,u.innerText=e.weather.wind.speed,l.innerText=e.weather.clouds,d.innerText=e.weather.humidity,p.innerText=e.city})};(e=>{const t=document.getElementById("city"),n=document.getElementById("selector");n.addEventListener("change",t=>{const n=document.getElementById("cities").innerText;if(t.target.checked){const t=e.imperial(n);i(t)}else{const t=e.celsius(n);i(t)}}),t.addEventListener("keydown",(function(){if(13==event.keyCode){const{value:r}=t;if(t.value="",n.checked){const t=e.imperial(r);i(t)}else{const t=e.celsius(r);i(t)}}}))})((()=>{async function e(e,t){try{const n=await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&APPID=cce2c60920c027318b4c5a975aebccc8`),r=await n.json();console.log(r);const i={weather:r.list[0].weather[0].description,pressure:r.list[0].main.pressure,wind:r.list[0].wind,clouds:r.list[0].clouds.all,humidity:r.list[0].main.humidity};return{city:e,weather:i,temp:r.list[0].main.temp,tempMax:r.list[0].main.temp_max,tempMin:r.list[0].main.temp_min,feels:r.list[0].main.feels_like,country:r.city.country}}catch(e){alert("City does not exist")}}return{celsius:function(t){return e(t,"metric")},imperial:function(t){return e(t,"imperial")}}})())},,function(e,t,n){var r=n(3),i=n(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],u=n[s]||0,l="".concat(s," ").concat(u);n[s]=u+1;var d=c(l),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(a[d].references++,a[d].updater(p)):a.push({identifier:l,updater:b(p,t),references:1}),r.push(l)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function m(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,h=0;function b(e,t){var n,r,i;if(t.singleton){var o=h++;n=f||(f=u(t)),r=p.bind(null,n,o,!1),i=p.bind(null,n,o,!0)}else n=u(t),r=m.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=c(n[r]);a[i].references--}for(var o=s(e,t),u=0;u<n.length;u++){var l=c(n[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=o}}}},function(e,t,n){(t=n(5)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap);"]),t.push([e.i,'body{background-color:#000}.main{position:relative;margin-top:5rem;width:45rem;height:45rem;border-radius:25px;background-color:#97b0e5;-webkit-box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75);-moz-box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75);box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75)}.main div{color:#fff;-webkit-box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75);-moz-box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75);box-shadow:inset 0px 2px 35px 11px rgba(0,0,0,.75)}.main span{color:#fff}.main .dates{position:relative;border-radius:20px;padding:2rem;left:-10rem;top:-7rem;width:auto;height:4rem;display:none;background-color:rgba(74,207,240,.2);font-family:"Press Start 2P",cursive}.main .city_country{position:relative;top:-9rem;width:auto;padding:2rem;height:2rem;display:none;font-family:"Press Start 2P",cursive;border-radius:25px}.main .switch{position:relative;display:inline-block;width:60px;height:34px;margin:5px}.main .slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.main .slider:before{position:absolute;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;-webkit-transition:.4s;transition:.4s}.main input:checked+.slider{background-color:#2196f3}.main input:focus+.slider{box-shadow:0 0 1px #2196f3}.main input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px)}.main .slider.round{border-radius:34px}.main .slider.round:before{border-radius:50%}.main .temps{position:relative;bottom:-7rem;width:35rem;height:10rem;border-radius:25px;background-color:green}.main .others{position:relative;left:0;bottom:-9rem;width:35rem;height:5rem;border-radius:25px;background-color:#cfbd16}.main .input_city{position:relative;top:-8rem}.main #no_city{display:none}',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,c,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&i[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,